import typing as tp

WELCOME = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞/–º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞/–∞–Ω–∏–º–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏"
HELP = """–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã –∏—â–µ—Ç–µ\n –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n /help - –ø–æ–º–æ—â—å\n
/history - –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n /stats - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –í–∞–º–∏ —Ñ–∏–ª—å–º–∞"""
FOUND = "–ü–æ—Ö–æ–∂–µ –Ω–∞ —Ç–æ, —á—Ç–æ –í—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ"
NOT_FOUND = """–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Ä–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å–º"""
CANCEL = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞/–º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞/–∞–Ω–∏–º–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏"
SOURCES = """–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–π—Ç—ã, –≥–¥–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∏–ª—å–º:

üí∞ –ü–ª–∞—Ç–Ω–æ –∏–ª–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è VPN –∏–ª–∏ –ø—Ä–æ–∫—Å–∏"""

# different logic for names
response_order: tp.List[str] = ['year', 'rating', 'length', 'description', 'contries', 'genres']
response_prefix: tp.List[str] = ['üìÖ', 'üìà', '‚åõÔ∏è', 'üé¨', 'üó∫', '‚ÑπÔ∏è']


# sometimes there is null in data
def null_to_something(record: str) -> tp.Optional[str]:
    if record == 'null':
        return None
    return record


def proseed_parameter(film_json: tp.Dict[str, tp.Any], parameter: str) -> tp.Optional[tp.Any]:
    if parameter in film_json:
        if parameter == 'countries':
            return ', '.join([c['country'] for c in film_json['countries']])
        elif parameter == 'genres':
            return ', '.join([g['genre'] for g in film_json['genres']])
        return null_to_something(film_json[parameter])
    return None


def construct_description(film_json: tp.Dict[str, tp.Any]) -> str:
    name_ru = proseed_parameter(film_json, 'nameRu')
    name_en = proseed_parameter(film_json, 'nameEn')
    description = proseed_parameter(film_json, 'description')
    year = proseed_parameter(film_json, 'year')
    countries = proseed_parameter(film_json, 'countries')
    length = proseed_parameter(film_json, 'filmLength')
    genres = proseed_parameter(film_json, 'genres')
    rating = proseed_parameter(film_json, 'rating')

    result: tp.Dict[tp.Any, tp.Any] = dict(zip(response_order, [year, rating, length, description, countries, genres]))

    name = ''

    if (name_ru is None or name_en is None):
        name = name_ru if name_en is None else name_en
        film_json['name'] = name
    else:
        name = ', '.join([name_ru, name_en])
        film_json['name'] = name_ru

    description = name + '\n'
    for idx, type in enumerate(response_order):
        if not result[type] is None:
            description = description + '\n' + response_prefix[idx] + ' ' + result[type]
        else:
            description = description + '\n' + response_prefix[idx] + ' –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    return description
